install.packages("rpart")
install.packages("rpart.plot")
setwd("D:\\msit\\Data-Science_2019501036\\Data Mining\\Final exam")
lensdata = read.csv("lenses.data.csv", header = FALSE, col.names = c("index", "age", "spectacle_prescription", "astigmatic", "tear_production_rate", "Class"))
lensdata$index <- NULL
library(rpart)
y<-as.factor(lensdata[,5])
x<-lensdata[,1:4]
model1<-rpart(y~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0, usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(model1)
gain <- sum(y==predict(model1,x,type="class"))/length(y)
gain
error_rate <- 1-sum(y==predict(model1,x,type="class"))/length(y)
error_rate
setwd("D:\\msit\\Data-Science_2019501036\\Data Mining\\Final exam")
lensinputdata = read.csv("lenses.data.csv", header = FALSE, col.names = c("index", "age", "spectacle_prescription", "astigmatic", "tear_production_rate", "Class"))
lensinputdata$index <- NULL
library(rpart)
z<-as.factor(lensdata[,5])
x<-lensinputdata[,1:4]
model1<-rpart(z~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0, usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(model1)
gain <- sum(z==predict(model1,x,type="class"))/length(z)
gain
error_rate <- 1-sum(z==predict(model1,x,type="class"))/length(z)
error_rate
View(lensdata)
View(lensinputdata)
View(x)
library(dplyr)
data <- read.csv("D:\\DataScience_2019501036\\Data Mining\\Final exam\\BSE_Sensex_Index.csv", header = TRUE)
closing <- data[['Close']]
func <- function(closing) {
a <- numeric()
len <- length(closing)-1
for (i in 1:len) {
a <- c(a, (closing[i] - closing[i+1])/closing[i+1])
}
a
}
b <- func(closing)
final <- (b[length(b)] + b[length(b)-1]+b[length(b)-2])/3
b = append(b, final)
mean = mean(b)
std = sd(b)
func = function(b) {
d = numeric()
library(dplyr)
data <- read.csv("E:\\DataScience_2019501052\\Data Mining\\Final exam\\BSE_Sensex_Index.csv", header = TRUE)
closing <- data[['Close']]
func <- function(closing) {
a <- numeric()
len <- length(closing)-1
for (i in 1:len) {
a <- c(a, (closing[i] - closing[i+1])/closing[i+1])
}
a
}
b <- func(closing)
final <- (b[length(b)] + b[length(b)-1]+b[length(b)-2])/3
b = append(b, final)
mean = mean(b)
std = sd(b)
func = function(b) {
d = numeric()
length_b = length(b)
for (i in 1:length_b) {
d = c(d, (b[i]-mean)/std)
}
d
}
d = func(b)
data$sdclose = d
result = filter(data, sdclose <- 3 & sdclose > 3)
head(result)
result[,1]
length_b = length(b)
for (i in 1:length_b) {
d = c(d, (b[i]-mean)/std)
}
d
}
d = func(b)
data$sdclose = d
result = filter(data, sdclose <- 3 & sdclose > 3)
head(result)
result[,1]
library(dplyr)
data <- read.csv("D:\\DataScience_2019501036\\Data Mining\\Final exam\\BSE_Sensex_Index.csv", header = TRUE)
closing <- data[['Close']]
func <- function(closing) {
a <- numeric()
len <- length(closing)-1
for (i in 1:len) {
a <- c(a, (closing[i] - closing[i+1])/closing[i+1])
}
a
}
b <- func(closing)
final <- (b[length(b)] + b[length(b)-1]+b[length(b)-2])/3
b = append(b, final)
mean = mean(b)
std = sd(b)
func = function(b) {
d = numeric()
length_b = length(b)
for (i in 1:length_b) {
d = c(d, (b[i]-mean)/std)
}
d
}
d = func(b)
data$sdclose = d
result = filter(data, sdclose <- 3 & sdclose > 3)
head(result)
result[,1]
library(dplyr)
data <- read.csv("D:\\DataScience_2019501036\\Data Mining\\Final exam\\BSE_Sensex_Index.csv", header = TRUE)
closing <- data[['Close']]
func <- function(closing) {
a <- numeric()
len <- length(closing)-1
for (i in 1:len) {
a <- c(a, (closing[i] - closing[i+1])/closing[i+1])
}
a
}
b <- func(closing)
final <- (b[length(b)] + b[length(b)-1]+b[length(b)-2])/3
b = append(b, final)
mean = mean(b)
std = sd(b)
func = function(b) {
d = numeric()
length_b = length(b)
for (i in 1:length_b) {
d = c(d, (b[i]-mean)/std)
}
d
}
d = func(b)
data$sdclose = d
result = filter(data, sdclose <- 3 & sdclose > 3)
head(result)
result[,1]
library(dplyr)
data <- read.csv("D:\\DataScience_2019501036\\Data Mining\\Final exam\\BSE_Sensex_Index.csv", header = TRUE)
closing <- data[['Close']]
func <- function(closing) {
a <- numeric()
len <- length(closing)-1
for (i in 1:len) {
a <- c(a, (closing[i] - closing[i+1])/closing[i+1])
}
a
}
b <- func(closing)
final <- (b[length(b)] + b[length(b)-1]+b[length(b)-2])/3
b = append(b, final)
mean = mean(b)
std = sd(b)
func = function(b) {
d = numeric()
length_b = length(b)
for (i in 1:length_b) {
d = c(d, (b[i]-mean)/std)
}
d
}
d <- func(b)
data$sdclose = d
result = filter(data, sdclose <- 3 & sdclose > 3)
head(result)
result[,1]
